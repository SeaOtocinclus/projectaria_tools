"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7619],{60643:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>n,toc:()=>c});var r=o(74848),i=o(28453);const s={sidebar_position:35,title:"Collaborative Tools"},a="Collaborative Tools",n={id:"collaborative_tools",title:"Collaborative Tools",description:"Overview",source:"@site/docs/collaborative_tools.mdx",sourceDirName:".",slug:"/collaborative_tools",permalink:"/projectaria_tools/docs/collaborative_tools",draft:!1,unlisted:!1,editUrl:"https://github.com/facebookresearch/projectaria_tools/tree/main/website/docs/collaborative_tools.mdx",tags:[],version:"current",sidebarPosition:35,frontMatter:{sidebar_position:35,title:"Collaborative Tools"},sidebar:"tutorialSidebar",previous:{title:"Export VRS to MP4 (Python)",permalink:"/projectaria_tools/docs/data_utilities/advanced_code_snippets/vrs_to_mp4"},next:{title:"About the Aria Research Kit",permalink:"/projectaria_tools/docs/ARK/about_ARK"}},l={},c=[{value:"Overview",id:"overview",level:2},{value:"Used in Project Aria Tools",id:"used-in-project-aria-tools",level:2},{value:"VRS",id:"vrs",level:3},{value:"Rerun",id:"rerun",level:3},{value:"Open source tools that use Project Aria",id:"open-source-tools-that-use-project-aria",level:2},{value:"Nerfstudio",id:"nerfstudio",level:3}];function d(e){const t={a:"a",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"collaborative-tools",children:"Collaborative Tools"})}),"\n",(0,r.jsx)(t.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsx)(t.p,{children:"This page provides an overview of open source tooling can be useful when working with Project Aria data."}),"\n",(0,r.jsx)(t.h2,{id:"used-in-project-aria-tools",children:"Used in Project Aria Tools"}),"\n",(0,r.jsx)(t.p,{children:"Some of the open source tools we use are:"}),"\n",(0,r.jsx)(t.h3,{id:"vrs",children:"VRS"}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.a,{href:"https://github.com/facebookresearch/vrs",children:"VRS"})," is the open source file format used by ",(0,r.jsx)(t.a,{href:"https://projectaria.com",children:"Project Aria"}),". It is optimized to record & playback streams of sensor data, such as images, audio samples, and any other discrete sensors (IMU, temperature, etc), stored in per-device streams of time-stamped records."]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"/projectaria_tools/docs/data_formats/aria_vrs/",children:"How Project Aria uses VRS"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"https://github.com/facebookresearch/vrs",children:"VRS Readme"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"https://github.com/facebookresearch/vrs/tree/main/vrs",children:"VRS Core functionality"})}),"\n"]}),"\n",(0,r.jsx)(t.h3,{id:"rerun",children:"Rerun"}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.a,{href:"https://www.rerun.io/",children:"Rerun"})," is an open source SDK and engine for visualizing and interacting with multi modal data streams. It can be used from Python, Rust and C++ and provides a log API and a visualizer. Project Aria Tools uses it to create Python visualization tools."]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"/projectaria_tools/docs/data_utilities/visualization/visualization_python",children:"Python Visualization using Project Aria Tools"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"https://facebookresearch.github.io/projectaria_tools/docs/data_utilities/visualization/visualization_python#an-introduction-to-rerun",children:"An introduction to Rerun"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"https://github.com/rerun-io/rerun/",children:"Rerun Readme"})}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"open-source-tools-that-use-project-aria",children:"Open source tools that use Project Aria"}),"\n",(0,r.jsx)(t.h3,{id:"nerfstudio",children:"Nerfstudio"}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.a,{href:"https://docs.nerf.studio/",children:"Nerfstudio"})," provides an API that allows for a simplified end-to-end process for creating, training, and testing NeRFs. The library supports a more interpretable implementation of NeRFs by modularizing each component."]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"https://docs.nerf.studio/quickstart/custom_dataset.html#aria",children:"Nerfstudio with Project Aria data"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"https://github.com/nerfstudio-project/nerfstudio/",children:"Nerfstudio Readme"})}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.a,{href:"https://docs.nerf.studio/nerfology/methods/splat.html",children:"Gaussian Splatting"})," with Nerfstudio"]}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},28453:(e,t,o)=>{o.d(t,{R:()=>a,x:()=>n});var r=o(96540);const i={},s=r.createContext(i);function a(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function n(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);